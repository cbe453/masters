#!/usr/bin/env/ python

import argparse
import pandas as pd
from Bio import SeqIO
from Bio.SeqIO import FastaIO
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import random

def main(args):
    print(args.cdsPath)
    sets = {}
    for i in range(0, len(args.cdsPath)):
        data = createFigures(args.cdsPath[i])
    #    sets[i] = data
        #print(len(data))

    #truncateSet1 = random.sample(sets[0], 12373)
    #print(len(truncateSet1))
    #print(stats.ks_2samp(sets[0], sets[1]))
        
def createFigures(cdsPath):
    cdsArray = []
    for cds in SeqIO.parse(cdsPath, "fasta"):
        #print(cds.id + '\t' + str(len(cds.seq)))
        cdsArray.append(len(cds.seq))

    #fig, (ax1, ax2) = plt.subplots(1, 2)
    #fig.suptitle('T. reesei')
    #fig.tight_layout()
    series = pd.Series(cdsArray)
    logSeries = np.log10(series)
    output = series.describe()
    
    #ax1.boxplot(series, vert=False)
    #ax1.set_ylabel('CDS Lengths (bp)')
    #ax2.boxplot(logSeries, vert=False)
    #ax2.set_ylabel('Log Transformed CDS Lengths')
    print("Max: " + str(series[series.idxmax()]))
    print("Min: " + str(series[series.idxmin()]))
    plt.hist(series, bins=range(0, series[series.idxmax()] + 50, 50))
    #plt.xlim([-100, 2500])
    #plt.xticks(np.arange(0, 2500, 100))
    plt.xticks(rotation=90)
    plt.tight_layout()
    #series.plot.box()
    plt.show()
    return(cdsArray)

        
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Analysis of gene lengths from gene finding tools')
    parser.add_argument('-c', type=str, dest='cdsPath', nargs='+', help='Space separated paths to files containing transcripts predicted by a gene finder')
    args = parser.parse_args()
    
    exit(main(args))
